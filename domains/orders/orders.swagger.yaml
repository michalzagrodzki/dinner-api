openapi: 3.0.0
components:
  schemas:
    NewOrder:
      type: object
      required:
        - title
        - dinner_id
        - name
        - phone
        - price
        - calories
        - ingredients
      properties:
        title:
          type: string
          description: Order's name.
          example: "Hot-Dog"
        dinner_id:
          type: string
          description: Dinner's id.
          example: "611273f32335860890b58056"
        name:
          type: string
          description: Name of client making order.
          example: "John Doe"
        phone:
          type: string
          description: Phone number of client making order.
          example: "123456789"
        email:
          type: string
          description: Email of client making order.
          example: "john@doe.com"
        price:
          type: string
          description: Order's price.
          example: "12.34"
        calories:
          type: number
          description: Calories of dinner in order.
          example: "1234"
        weight:
          type: number
          description: Weight of dinner in order.
          example: "123"
        ingredients:
          type: array
          description: List of ingredient ids in order.
          items: {
                  type: string
                }
          example: ["610d16", "a63a0"]
    Order:
      allOf:
        - type: object
          properties:
            _id:
              type: integer
              description: The order ID.
              example: 0
            title:
              type: string
              description: Order's name.
              example: "Hot-Dog"
            dinner_id:
              type: string
              description: Dinner's id.
              example: "611273f32335860890b58056"
            name:
              type: string
              description: Name of client making order.
              example: "John Doe"
            phone:
              type: string
              description: Phone number of client making order.
              example: "123456789"
            email:
              type: string
              description: Email of client making order.
              example: "john@doe.com"
            price:
              type: string
              description: Order's price.
              example: "12.34"
            calories:
              type: number
              description: Calories of dinner in order.
              example: "1234"
            weight:
              type: number
              description: Weight of dinner in order.
              example: "123"
            ingredients:
              type: array
              description: List of ingredient ids in order.
              items: {
                  type: string
                }
              example: ["610d16", "a63a0"]
        - $ref: '#/components/schemas/Order'
tags: [
    {
      name: Order,
      description: API for orders in the system.
    }
  ]
paths:
  /orders:
    get:
      summary: Retrieve a list of Orders.
      tags:
        - Order
      description: Retrieve a list of orders from Dinners API.
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
    post:
      summary: Post new Order.
      tags:
        - Order
      description: Post a new order to Dinners API.
      requestBody: {
        content: {
          application/json: {
            schema: {
              type: object,
              properties: {
                title: { 
                  description: "Title of new ordered dinner",
                  type: string
                },
                dinner_id: {
                  description: "Dinner id of new order",
                  type: string
                },
                name: {
                  description: "Name of client who is making order",
                  type: string
                },
                phone: {
                  description: "Phone number of client who is making order",
                  type: string
                },
                email: {
                  description: "Email of client who is making order",
                  type: string
                },
                price: {
                  description: "Price of new order",
                  type: string
                },
                calories: {
                  description: "Calories of dinner of new order",
                  type: number
                },
                weight: {
                  description: "Weight of dinner of new order",
                  type: number
                },
                ingredients: {
                  description: "List of ingredient ids in new order",
                  type: array,
                  items: {
                    type: string
                  }
                }
              },
              required: [title, name, phone, price, calories, ingredients]
            }
          }
        }
      }
      responses:
        200:
          description: Ok.
  /orders/details/{orderId}:
    get:
      summary: Retrieve details of selected Order.
      tags:
        - Order
      description: Retrieve details of selected order from Dinners API.
      parameters:
        - name: orderId
          required: true
          in: path
          schema:
            type: string
            description: Order id
            example: "6113f20c348351e616b170c4"
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
    put:
      summary: Update details of selected Order.
      tags:
        - Order
      description: Update selected order from Dinners API.
      parameters:
        - name: orderId
          required: true
          in: path
          schema:
            type: string
            description: Order id
            example: "611c15984a73d963f00e3adb"
      requestBody: {
        content: {
          application/json: {
            schema: {
              type: object,
              properties: {
                title: { 
                  description: "Title of updated ordered dinner",
                  type: string
                },
                dinner_id: {
                  description: "Dinner id of updated order",
                  type: string
                },
                name: {
                  description: "Name of client who is making order",
                  type: string
                },
                phone: {
                  description: "Phone number of client who is making order",
                  type: string
                },
                email: {
                  description: "Email of client who is making order",
                  type: string
                },
                price: {
                  description: "Price of updated order",
                  type: string
                },
                calories: {
                  description: "Calories of dinner of updated order",
                  type: number
                },
                weight: {
                  description: "Weight of dinner of updated order",
                  type: number
                },
                ingredients: {
                  description: "List of ingredient ids in updated order",
                  type: array,
                  items: {
                    type: string
                  }
                }
              },
              required: [title, name, phone, price, calories, ingredients]
            }
          }
        }
      }
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: boolean
    delete:
      summary: Delete selected Order.
      tags:
        - Order
      description: Delete selected order from Dinners API.
      parameters:
        - name: orderId
          required: true
          in: path
          schema:
            type: string
            description: Order id
            example: "611c15984a73d963f00e3adb"
      responses:
        200:
          description: Ok.
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: boolean
        